// <auto-generated />
using System;
using JustBlog.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustBlog.Core.Migrations
{
    [DbContext(typeof(JustBlogContext))]
    [Migration("20221110134601_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JustBlog.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("52c378ff-b013-4311-901f-ed2484895c41"),
                            AboutMe = "Nothing to say",
                            AccessFailedCount = 0,
                            Age = 26,
                            ConcurrencyStamp = "c0ebe7be-3704-4798-9d64-759572ffda92",
                            Email = "nqtuan204@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NQTUAN204@GMAIL.COM",
                            NormalizedUserName = "NQTUAN204@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMSmK+f+0s9pKrxuhaTUhzpF6/XGoBbVGnY57u3XpzwP8lxoz8E50tU9JCpo728ZAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ceaceaf-71ef-471b-ac3e-c5eeaafc77b8",
                            TwoFactorEnabled = false,
                            UserName = "nqtuan204@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("513e04fc-760a-48c5-aef3-8bd3b2db2733"),
                            AboutMe = "Nothing to say",
                            AccessFailedCount = 0,
                            Age = 26,
                            ConcurrencyStamp = "5d87dfc2-275c-4ef8-9a8a-e3fa1b2883d8",
                            Email = "nqtuan205@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NQTUAN205@GMAIL.COM",
                            NormalizedUserName = "NQTUAN205@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEqJYNz7waG8MIRh9jEySWPQca/zMHQP8cz1haEef1YhH6NwWo36IZTDS0pWlDaQuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95fef7f7-f26d-4ae8-8e3d-6f0e325a0eb0",
                            TwoFactorEnabled = false,
                            UserName = "nqtuan205@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1eee39a2-ab38-456a-b8e3-4145b5ecb52e"),
                            AboutMe = "Nothing to say",
                            AccessFailedCount = 0,
                            Age = 26,
                            ConcurrencyStamp = "b59f9e92-3f77-448c-b54d-75384b5854d1",
                            Email = "nqtuan206@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NQTUAN206@GMAIL.COM",
                            NormalizedUserName = "NQTUAN206@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB7b5G0oCrhOOSPvUJme7CyQk2J9Y55aYGEuoubDbzF+I88meP+tT+crYTNWH1W9CA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47d09324-54e3-4b9a-a6e6-d42ebef5c360",
                            TwoFactorEnabled = false,
                            UserName = "nqtuan206@gmail.com"
                        });
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Funny story about friends",
                            Name = "Friends",
                            UrlSlug = "friends"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Funny story about family",
                            Name = "Family",
                            UrlSlug = "family"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Other funny story",
                            Name = "Others",
                            UrlSlug = "others"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Funny story about daily life",
                            Name = "Daily life",
                            UrlSlug = "daily-life"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Funny story about animal",
                            Name = "Animal",
                            UrlSlug = "animal"
                        });
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CommentHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentHeader = "Comment header 1",
                            CommentText = "Comment Text 1",
                            CommentTime = new DateTime(2022, 10, 28, 10, 10, 10, 0, DateTimeKind.Unspecified),
                            Email = "Email1@gmail.com",
                            Name = "Name 1",
                            PostId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommentHeader = "Comment header 2",
                            CommentText = "Comment Text 2",
                            CommentTime = new DateTime(2022, 10, 28, 10, 10, 10, 0, DateTimeKind.Unspecified),
                            Email = "Email2@gmail.com",
                            Name = "Name 2",
                            PostId = 1
                        },
                        new
                        {
                            Id = 3,
                            CommentHeader = "Comment header 3",
                            CommentText = "Comment Text 3",
                            CommentTime = new DateTime(2022, 10, 28, 10, 10, 10, 0, DateTimeKind.Unspecified),
                            Email = "Email3@gmail.com",
                            Name = "Name 3",
                            PostId = 2
                        },
                        new
                        {
                            Id = 4,
                            CommentHeader = "Comment header 4",
                            CommentText = "Comment Text 4",
                            CommentTime = new DateTime(2022, 10, 28, 10, 10, 10, 0, DateTimeKind.Unspecified),
                            Email = "Email4@gmail.com",
                            Name = "Name 4",
                            PostId = 1
                        });
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Post Content");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Posted On");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("RateCount")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Short Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalRate")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            PostContent = "\"Since he lost his money, half his friends don't know him any more\"\r\n\r\n\"And the other half ?\"\r\n\r\n\"They don't know yet that has lost it\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 23,
                            ShortDescription = "Funny story about friends",
                            Title = "Money And Friends",
                            TotalRate = 100,
                            UrlSlug = "money-and-friends",
                            ViewCount = 150
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            PostContent = "Next-door Neighbor's Little Boy :\r\n\r\n\"Father say could you lend him your cassette player for tonight ?\"\r\n\r\nHeavy - Metal Enthusiast :\r\n\r\n\"Have you a party on ?\"\r\n\r\nLittle Boy : \"Oh, no. Father only wants to go to bed",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 32,
                            ShortDescription = "Funny story about family",
                            Title = "Father Wants To Go To Bed",
                            TotalRate = 100,
                            UrlSlug = "father-wants-to-go-to-bed",
                            ViewCount = 250
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            PostContent = "A stranger on horse back came to a river with which he was unfamiliar. The traveller asked a youngster if it was deep.\r\n\r\n\"No\", replied the boy, and the rider started to cross, but soon found that he and his horse had to swim for their lives.\r\n\r\nWhen the traveller reached the other side he turned and shouted : \"I thought you said it wasn't deep ?\"\r\n\r\n\"It isn't\", was the boy's reply : \"it only takes grandfather's ducks up to their middles !\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 15,
                            ShortDescription = "Another Funny story",
                            Title = "The river isn't deep",
                            TotalRate = 100,
                            UrlSlug = "the-river-isn-t-deep",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            PostContent = "\"My daughter's music lessons are a fortune to me ?\"\r\n\r\n\"How is that ?\"\r\n\r\n\"They enabled me to buy the neighbors' houses at half price\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about family",
                            Title = "My Daughter's Music Lessons",
                            TotalRate = 100,
                            UrlSlug = "my-daughter-s-music-lessons",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            PostContent = "Country Policeman (at the scene of murder) : \"You can't come in here\"\r\n\r\nReporter : \"But I've been sent to do the murder\"\r\n\r\nCountry Policeman : \"Well, you're too late, the murder's been done\".",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about daily life",
                            Title = "A Policeman And A Reporter",
                            TotalRate = 100,
                            UrlSlug = "a-policeman-and-a-reporter",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            PostContent = "Artist : \"That, sir, is a cow grazing\"\r\n\r\nVisitor : \"Where is the grass ?\"\r\n\r\nArtist : \"The cow has eaten it\"\r\n\r\nVisitor : \"But where is the cow ?\"\r\n\r\nArtist : \"You don't suppose she'd be fool enough to stay there after she'd eaten all the grass, do you ?\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about animal",
                            Title = "A Cow Grazing",
                            TotalRate = 100,
                            UrlSlug = "a-cow-grazing",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            PostContent = "Artist : \"That, sir, is a cow grazing\"\r\n\r\nVisitor : \"Where is the grass ?\"\r\n\r\nArtist : \"The cow has eaten it\"\r\n\r\nVisitor : \"But where is the cow ?\"\r\n\r\nArtist : \"You don't suppose she'd be fool enough to stay there after she'd eaten all the grass, do you ?\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about daily life",
                            Title = "Let's Work Together",
                            TotalRate = 100,
                            UrlSlug = "let-s-work-together",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            PostContent = "\"Did you have any difficulty with your French in Paris ?\"\r\n\r\n\"No, but the French people did\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about daily life",
                            Title = "The French People Have Difficulty",
                            TotalRate = 100,
                            UrlSlug = "the-french-people-have-difficulty",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            PostContent = "Newsboy : \"Great mystery! Fifty victims! Paper, mister ?\"\r\n\r\nPasserby : \"Here boy, I'll take one\" (After reading a moment) \"Say, boy, there's nothing of the kind in this paper. Where is it ?\"\r\n\r\nNewsboy : \"That's the mystery, sir. You're the fifty first victim\".",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about daily life",
                            Title = "Great Mystery",
                            TotalRate = 100,
                            UrlSlug = "great-mystery",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            PostContent = "\"What's the idea of the Greens having French lessons ?\"\r\n\r\n\"They have adopted a French baby, and want to understand what she says when she begins to talk\".",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about daily life",
                            Title = "Why Do They Have French Lesson?",
                            TotalRate = 100,
                            UrlSlug = "why-do-they-have-french-lesson",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            PostContent = "A man is at the bar, really drunk. Some guys decide to be good samaritans and get him home.\r\n\r\nSo they pick him up off the floor, and drag him out the door. On the way to the car, he falls down three times. When they get to his house, they help him out of the car and, he falls down four more times.\r\n\r\nThey ring the bell, and one says, \"Here s your husband!\"\r\n\r\nThe man s wife says, \"Where the hell is his wheelchair?\"",
                            PostedOn = new DateTime(2022, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = true,
                            RateCount = 29,
                            ShortDescription = "Funny story about daily life",
                            Title = "WHERE IS MY WHEELCHAIR?",
                            TotalRate = 100,
                            UrlSlug = "where-is-my-wheelchair",
                            ViewCount = 100
                        });
                });

            modelBuilder.Entity("JustBlog.Core.Entities.PostTagMap", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostTagMaps", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 2,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 3,
                            PostId = 2
                        },
                        new
                        {
                            TagId = 4,
                            PostId = 2
                        },
                        new
                        {
                            TagId = 5,
                            PostId = 3
                        },
                        new
                        {
                            TagId = 6,
                            PostId = 4
                        },
                        new
                        {
                            TagId = 7,
                            PostId = 5
                        },
                        new
                        {
                            TagId = 8,
                            PostId = 5
                        },
                        new
                        {
                            TagId = 9,
                            PostId = 6
                        },
                        new
                        {
                            TagId = 10,
                            PostId = 7
                        },
                        new
                        {
                            TagId = 7,
                            PostId = 7
                        },
                        new
                        {
                            TagId = 7,
                            PostId = 8
                        },
                        new
                        {
                            TagId = 11,
                            PostId = 9
                        },
                        new
                        {
                            TagId = 12,
                            PostId = 10
                        },
                        new
                        {
                            TagId = 7,
                            PostId = 10
                        },
                        new
                        {
                            TagId = 7,
                            PostId = 11
                        });
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            Description = "Funny story about money",
                            Name = "Money",
                            UrlSlug = "money"
                        },
                        new
                        {
                            Id = 2,
                            Count = 2,
                            Description = "Funny story about friends",
                            Name = "Friends",
                            UrlSlug = "friends"
                        },
                        new
                        {
                            Id = 3,
                            Count = 3,
                            Description = "Funny story about father",
                            Name = "Father",
                            UrlSlug = "father"
                        },
                        new
                        {
                            Id = 4,
                            Count = 4,
                            Description = "Funny story about family",
                            Name = "Family",
                            UrlSlug = "family"
                        },
                        new
                        {
                            Id = 5,
                            Count = 5,
                            Description = "Funny story about natural",
                            Name = "Natural",
                            UrlSlug = "natural"
                        },
                        new
                        {
                            Id = 6,
                            Count = 6,
                            Description = "Funny story about music",
                            Name = "Music",
                            UrlSlug = "music"
                        },
                        new
                        {
                            Id = 7,
                            Count = 7,
                            Description = "Funny story about human",
                            Name = "Human",
                            UrlSlug = "human"
                        },
                        new
                        {
                            Id = 8,
                            Count = 8,
                            Description = "Funny story about policeman",
                            Name = "Policeman",
                            UrlSlug = "policeman"
                        },
                        new
                        {
                            Id = 9,
                            Count = 9,
                            Description = "Funny story about animal",
                            Name = "Animal",
                            UrlSlug = "animal"
                        },
                        new
                        {
                            Id = 10,
                            Count = 10,
                            Description = "Funny story about office",
                            Name = "Office",
                            UrlSlug = "office"
                        },
                        new
                        {
                            Id = 11,
                            Count = 11,
                            Description = "Funny story about mistery",
                            Name = "Mistery",
                            UrlSlug = "mistery"
                        },
                        new
                        {
                            Id = 12,
                            Count = 12,
                            Description = "Funny story about French",
                            Name = "French",
                            UrlSlug = "mistery"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("913f9729-54ad-496e-bf74-029be9537909"),
                            ConcurrencyStamp = "19873209-d250-4b98-bf6a-53dae23a954d",
                            Name = "Blog Owner",
                            NormalizedName = "BLOG OWNER"
                        },
                        new
                        {
                            Id = new Guid("d7bc1c00-3eb2-4db9-bb17-c18c1cde4443"),
                            ConcurrencyStamp = "5106789a-fffd-4439-957d-c2fde2aaeaf1",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = new Guid("f8853c24-2395-40b2-a7a9-47e46190fc4c"),
                            ConcurrencyStamp = "5b509e35-c271-4751-934d-45863ab8a398",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("52c378ff-b013-4311-901f-ed2484895c41"),
                            RoleId = new Guid("913f9729-54ad-496e-bf74-029be9537909")
                        },
                        new
                        {
                            UserId = new Guid("513e04fc-760a-48c5-aef3-8bd3b2db2733"),
                            RoleId = new Guid("d7bc1c00-3eb2-4db9-bb17-c18c1cde4443")
                        },
                        new
                        {
                            UserId = new Guid("1eee39a2-ab38-456a-b8e3-4145b5ecb52e"),
                            RoleId = new Guid("f8853c24-2395-40b2-a7a9-47e46190fc4c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Comment", b =>
                {
                    b.HasOne("JustBlog.Core.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Post", b =>
                {
                    b.HasOne("JustBlog.Core.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JustBlog.Core.Entities.PostTagMap", b =>
                {
                    b.HasOne("JustBlog.Core.Entities.Post", "Post")
                        .WithMany("PostTagMaps")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustBlog.Core.Entities.Tag", "Tag")
                        .WithMany("PostTagMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JustBlog.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JustBlog.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustBlog.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JustBlog.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTagMaps");
                });

            modelBuilder.Entity("JustBlog.Core.Entities.Tag", b =>
                {
                    b.Navigation("PostTagMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
